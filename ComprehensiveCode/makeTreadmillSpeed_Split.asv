function beltSpeedsImposed = makeTreadmillSpeed_Split(paramFixed)

L = 0.95; g = 9.81;
timeScaling = sqrt(L/g);
speedScaling = sqrt(L*g);

% % v1
% vNormal = -0.40;
% vFast = -0.50;
% vSlow = -0.30;
% 
% vHalfFast = -0.45;
% vHalfSlow = -0.35;

% v2
vNormal = -0.375;
vFast = -0.50;
vSlow = -0.25;

vHalfFast = -0.4375;
vHalfSlow = -0.3125;


%%
switch paramFixed.speedProtocol
    case 'single speed'

        %% transitioning from one speed to next takes 10 seconds, say
        tDurationTransition = paramFixed.transitionTime/timeScaling;

        %% phase 1: warmup
        tDuration1 = 9*60/timeScaling;
        footSpeed1_phase1 = vNormal;
        footSpeed2_phase1 = vNormal;

        %% phase 2: baseline
        tDuration2 = 1*60/timeScaling;
        footSpeed1_phase2 = vNormal;
        footSpeed2_phase2 = vNormal;

        %% phase 3: adaptation
        tDuration3 = 1*60/timeScaling; % default is 20
        footSpeed1_phase3 = vNormal;
        footSpeed2_phase3 = vNormal;

        %% phase 4: post-adaptation
        tDuration4 = 1*60/timeScaling;
        footSpeed1_phase4 = vNormal;
        footSpeed2_phase4 = vNormal;

        %% initialization
        tStore = [0; tDuration1; tDuration2; tDuration3; tDuration4];
        tStore = cumsum(tStore);

        footSpeed1Store = [footSpeed1_phase1; footSpeed1_phase1; ...
            footSpeed1_phase2; footSpeed1_phase3; footSpeed1_phase4];
        footSpeed2Store = [footSpeed2_phase1; footSpeed2_phase1; ...
            footSpeed2_phase2; footSpeed2_phase3; footSpeed2_phase4];


    case 'classic split belt'

        %% transitioning from one speed to next takes 10 seconds, say
        tDurationTransition = paramFixed.transitionTime/timeScaling;

        %% phase 1: warmup (tied)
        tDuration1 = 9*60/timeScaling;
        footSpeed1_phase1 = vNormal;
        footSpeed2_phase1 = vNormal;

        %% phase 2: baseline (tied)
        tDuration2 = 1*60/timeScaling;
        footSpeed1_phase2 = vNormal;
        footSpeed2_phase2 = vNormal;

        %% phase 3: split adaptation
        tDuration3 = 30*60/timeScaling; % default is 20
        footSpeed1_phase3 = vFast;
        footSpeed2_phase3 = vSlow;

        %% phase 4: second adaptation (back to tied)
        tDuration4 = 30*60/timeScaling; % default is 20
        footSpeed1_phase4 = vNormal;
        footSpeed2_phase4 = vNormal;

        %% initialization
        tStore = [0; tDuration1; tDuration2; tDuration3; tDuration4];
        tStore = cumsum(tStore);

        footSpeed1Store = [footSpeed1_phase1; footSpeed1_phase1; ...
            footSpeed1_phase2; footSpeed1_phase3; footSpeed1_phase4];
        footSpeed2Store = [footSpeed2_phase1; footSpeed2_phase1; ...
            footSpeed2_phase2; footSpeed2_phase3; footSpeed2_phase4];



    case 'classic split belt'

        %% transitioning from one speed to next takes 10 seconds, say
        tDurationTransition = paramFixed.transitionTime/timeScaling;

        %% phase 1: warmup (tied)
        tDuration1 = 9*60/timeScaling;
        footSpeed1_phase1 = vNormal;
        footSpeed2_phase1 = vNormal;

        %% phase 2: baseline (tied)
        tDuration2 = 1*60/timeScaling;
        footSpeed1_phase2 = vNormal;
        footSpeed2_phase2 = vNormal;

        %% phase 3: split adaptation
        tDuration3 = 30*60/timeScaling; % default is 20
        footSpeed1_phase3 = vFast;
        footSpeed2_phase3 = vSlow;

        %% phase 4: second adaptation (back to tied)
        tDuration4 = 30*60/timeScaling; % default is 20
        footSpeed1_phase4 = vNormal;
        footSpeed2_phase4 = vNormal;

        %% initialization
        tStore = [0; tDuration1; tDuration2; tDuration3; tDuration4];
        tStore = cumsum(tStore);

        footSpeed1Store = [footSpeed1_phase1; footSpeed1_phase1; ...
            footSpeed1_phase2; footSpeed1_phase3; footSpeed1_phase4];
        footSpeed2Store = [footSpeed2_phase1; footSpeed2_phase1; ...
            footSpeed2_phase2; footSpeed2_phase3; footSpeed2_phase4];

    case 'split savings TATA'

        %% transitioning from one speed to next takes 10 seconds, say
        tDurationTransition = paramFixed.transitionTime/timeScaling;

        %% phase 1: warmup (tied)
        tDuration1 = 9*60/timeScaling;
        footSpeed1_phase1 = vNormal;
        footSpeed2_phase1 = vNormal;

        %% phase 2: baseline (tied)
        tDuration2 = 1*60/timeScaling;
        footSpeed1_phase2 = vNormal;
        footSpeed2_phase2 = vNormal;

        %% phase 3: split adaptation
        tDuration3 = 20*60/timeScaling; % default was 30
        footSpeed1_phase3 = vFast;
        footSpeed2_phase3 = vSlow;

        %% phase 4: second adaptation (back to tied)
        tDuration4 = 30*60/timeScaling; % default was 30
        footSpeed1_phase4 = vNormal;
        footSpeed2_phase4 = vNormal;

        %% phase 5: third adaptation (back to split)
        tDuration5 = 20*60/timeScaling; % default was 30
        footSpeed1_phase5 = vFast;
        footSpeed2_phase5 = vSlow;

        %% initialization
        tStore = [0; tDuration1; tDuration2; tDuration3; tDuration4; tDuration5];
        tStore = cumsum(tStore);

        footSpeed1Store = [footSpeed1_phase1; footSpeed1_phase1; ...
            footSpeed1_phase2; footSpeed1_phase3; footSpeed1_phase4; footSpeed1_phase5];
        footSpeed2Store = [footSpeed2_phase1; footSpeed2_phase1; ...
            footSpeed2_phase2; footSpeed2_phase3; footSpeed2_phase4; footSpeed2_phase5];

    case 'split interference MaloneBastian TATBTA'

        %% transitioning from one speed to next takes 10 seconds, say
        tDurationTransition = paramFixed.transitionTime/timeScaling;

        %% phase 1: warmup (tied)
        tDuration1 = 5*60/timeScaling;
        footSpeed1_phase1 = vNormal;
        footSpeed2_phase1 = vNormal;

        %% phase 2: split
        tDuration2 = 15*60/timeScaling;
        footSpeed1_phase2 = vFast;
        footSpeed2_phase2 = vSlow;

        %% phase 3: tied
        tDuration3 = 15*60/timeScaling; % default is 20
        footSpeed1_phase3 = vSlow;
        footSpeed2_phase3 = vSlow;

        %% phase 4: counter split perturbation
        %         paramFixed.mawaseCounter = 0.833; % default
        paramFixed.mawaseCounter = 15; % default
        tDuration4 = paramFixed.mawaseCounter*60/timeScaling; % default is . use 1.1 to get down to
        footSpeed1_phase4 = vSlow;
        footSpeed2_phase4 = vFast;

        %% phase 5: tied
        tDuration5 = 15*60/timeScaling; % default is 20
        footSpeed1_phase5 = vSlow;
        footSpeed2_phase5 = vSlow;

        %% phase 6: split
        tDuration6 = 15*60/timeScaling; % default is 20
        footSpeed1_phase6 = vFast;
        footSpeed2_phase6 = vSlow;

        %% initialization
        tStore = [0; tDuration1; tDuration2; tDuration3; tDuration4; tDuration5; tDuration6];
        tStore = cumsum(tStore);

        footSpeed1Store = [footSpeed1_phase1; footSpeed1_phase1; ...
            footSpeed1_phase2; footSpeed1_phase3; footSpeed1_phase4;  footSpeed1_phase5;  footSpeed1_phase6];
        footSpeed2Store = [footSpeed2_phase1; footSpeed2_phase1; ...
            footSpeed2_phase2; footSpeed2_phase3; footSpeed2_phase4;  footSpeed2_phase5;  footSpeed2_phase6];


    case 'split interference MaloneBastian TATATA'

        %% transitioning from one speed to next takes 10 seconds, say
        tDurationTransition = paramFixed.transitionTime/timeScaling;

        %% phase 1: warmup (tied)
        tDuration1 = 5*60/timeScaling;
        footSpeed1_phase1 = vNormal;
        footSpeed2_phase1 = vNormal;

        %% phase 2: split
        tDuration2 = 15*60/timeScaling;
        footSpeed1_phase2 = vFast;
        footSpeed2_phase2 = vSlow;

        %% phase 3: tied
        tDuration3 = 15*60/timeScaling; % default is 20
        footSpeed1_phase3 = vSlow;
        footSpeed2_phase3 = vSlow;

        %% phase 4: split perturbation
        %         paramFixed.mawaseCounter = 0.833; % default
        paramFixed.mawaseCounter = 15; % default
        tDuration4 = paramFixed.mawaseCounter*60/timeScaling; % default is . use 1.1 to get down to
        footSpeed1_phase4 = vFast;
        footSpeed2_phase4 = vSlow;

        %% phase 5: tied
        tDuration5 = 15*60/timeScaling; % default is 20
        footSpeed1_phase5 = vSlow;
        footSpeed2_phase5 = vSlow;

        %% phase 6: split
        tDuration6 = 15*60/timeScaling; % default is 20
        footSpeed1_phase6 = vFast;
        footSpeed2_phase6 = vSlow;

        %% initialization
        tStore = [0; tDuration1; tDuration2; tDuration3; tDuration4; tDuration5; tDuration6];
        tStore = cumsum(tStore);

        footSpeed1Store = [footSpeed1_phase1; footSpeed1_phase1; ...
            footSpeed1_phase2; footSpeed1_phase3; footSpeed1_phase4;  footSpeed1_phase5;  footSpeed1_phase6];
        footSpeed2Store = [footSpeed2_phase1; footSpeed2_phase1; ...
            footSpeed2_phase2; footSpeed2_phase3; footSpeed2_phase4;  footSpeed2_phase5;  footSpeed2_phase6];


    case 'split interference new expt TBA'

        vNormal = -0.9/speedScaling;
        vFast = -1.2/speedScaling;
        vSlow = -0.6/speedScaling;

        %% transitioning from one speed to next takes 10 seconds, say
        tDurationTransition = paramFixed.transitionTime/timeScaling;

        %% phase 1: warmup (tied)
        tDuration1 = 1*60/timeScaling;
        footSpeed1_phase1 = vNormal;
        footSpeed2_phase1 = vNormal;

        %% phase 2: baseline (tied)
        tDuration2 = 1*60/timeScaling;
        footSpeed1_phase2 = vNormal;
        footSpeed2_phase2 = vNormal;

        %% phase 3: split adaptation
        tDuration3 = 10*60/timeScaling; % default is 20
        footSpeed1_phase3 = vFast;
        footSpeed2_phase3 = vSlow;

        %% phase 4: counter perturbation
        %         paramFixed.mawaseCounter = 0.833; % default
        paramFixed.mawaseCounter = 10; % default
        tDuration4 = paramFixed.mawaseCounter*60/timeScaling; % default is . use 1.1 to get down to
        footSpeed1_phase4 = vSlow;
        footSpeed2_phase4 = vFast;

        %% phase 5:
        tDuration5 = 5*60/timeScaling; % default is 20
        footSpeed1_phase5 = vSlow;
        footSpeed2_phase5 = vSlow;

        %% initialization
        tStore = [0; tDuration1; tDuration2; tDuration3; tDuration4; tDuration5];
        tStore = cumsum(tStore);

        footSpeed1Store = [footSpeed1_phase1; footSpeed1_phase1; ...
            footSpeed1_phase2; footSpeed1_phase3; footSpeed1_phase4;  footSpeed1_phase5];
        footSpeed2Store = [footSpeed2_phase1; footSpeed2_phase1; ...
            footSpeed2_phase2; footSpeed2_phase3; footSpeed2_phase4;  footSpeed2_phase5];


    case 'split interference new expt TA'

        vNormal = -0.9/speedScaling;
        vFast = -1.2/speedScaling;
        vSlow = -0.6/speedScaling;

        %% transitioning from one speed to next takes 10 seconds, say
        tDurationTransition = paramFixed.transitionTime/timeScaling;

        %% phase 1: warmup (tied)
        tDuration1 = 1*60/timeScaling;
        footSpeed1_phase1 = vNormal;
        footSpeed2_phase1 = vNormal;

        %% phase 2: baseline (tied)
        tDuration2 = 1*60/timeScaling;
        footSpeed1_phase2 = vNormal;
        footSpeed2_phase2 = vNormal;

        %% phase 3: split adaptation
        tDuration3 = 10*60/timeScaling; % default is 20
        footSpeed1_phase3 = vSlow;
        footSpeed2_phase3 = vFast;

        %% phase 4:
        tDuration4 = 5*60/timeScaling; % default is 20
        footSpeed1_phase4 = vSlow;
        footSpeed2_phase4 = vSlow;

        %% initialization
        tStore = [0; tDuration1; tDuration2; tDuration3; tDuration4];
        tStore = cumsum(tStore);

        footSpeed1Store = [footSpeed1_phase1; footSpeed1_phase1; ...
            footSpeed1_phase2; footSpeed1_phase3; footSpeed1_phase4];
        footSpeed2Store = [footSpeed2_phase1; footSpeed2_phase1; ...
            footSpeed2_phase2; footSpeed2_phase3; footSpeed2_phase4];

    case 'splitabruptNoNoise'

        %% transitioning from one speed to next takes 10 seconds, say
        tDurationTransition = paramFixed.transitionTime/timeScaling;

        %% phase 1: warmup (tied)
        tDuration1 = 2*60/timeScaling;
        footSpeed1_phase1 = vNormal;
        footSpeed2_phase1 = vNormal;

        %% phase 2: baseline (tied)
        tDuration2 = 2*60/timeScaling;
        footSpeed1_phase2 = vNormal;
        footSpeed2_phase2 = vNormal;

        %% phase 3: split adaptation
        tDuration3 = 10*60/timeScaling; % default is 20
        footSpeed1_phase3 = vFast;
        footSpeed2_phase3 = vSlow;

        %% phase 4: second adaptation (back to tied)
        tDuration4 = 10*60/timeScaling; % default is 20
        footSpeed1_phase4 = vSlow;
        footSpeed2_phase4 = vSlow;

        %% initialization
        tStore = [0; tDuration1; tDuration2; tDuration3; tDuration4];
        tStore = cumsum(tStore);

        footSpeed1Store = [footSpeed1_phase1; footSpeed1_phase1; ...
            footSpeed1_phase2; footSpeed1_phase3; footSpeed1_phase4];
        footSpeed2Store = [footSpeed2_phase1; footSpeed2_phase1; ...
            footSpeed2_phase2; footSpeed2_phase3; footSpeed2_phase4];


        %% adding transition phases
        tStore_new = 0;
        footSpeed1Store_new = footSpeed1Store(1);
        footSpeed2Store_new = footSpeed2Store(1);

        for iTran = 2:length(tStore)
            if iTran<length(tStore)
                tStore_new = [tStore_new; tStore(iTran); ...
                    tStore(iTran)+tDurationTransition];
                footSpeed1Store_new = [footSpeed1Store_new; footSpeed1Store(iTran); footSpeed1Store(iTran+1)];
                footSpeed2Store_new = [footSpeed2Store_new; footSpeed2Store(iTran); footSpeed2Store(iTran+1)];
            else
                tStore_new = [tStore_new; tStore(iTran)];
                footSpeed1Store_new = [footSpeed1Store_new; footSpeed1Store(iTran)];
                footSpeed2Store_new = [footSpeed2Store_new; footSpeed2Store(iTran)];
            end
        end

        %% plot the things
        figure(2555);
        plot(tStore_new,abs(footSpeed1Store_new),'linewidth',2); hold on;
        plot(tStore_new,abs(footSpeed2Store_new),'linewidth',2);
        xlabel('t'); ylabel('treadmill speeds (non-dimensional)');
        legend('(abs) fast belt','(abs) slow belt');
        ylim([0 abs(vFast)*1.25]);
        title('Split belt speed change protocol');



    case 'splitabruptNoisy'

        vNormal = -0.9/speedScaling;
        vFast = -1.2/speedScaling;
        vSlow = -0.6/speedScaling;

        %% transitioning from one speed to next takes 10 seconds, say
        tDurationTransition = paramFixed.transitionTime/timeScaling;

        %% phase 1: warmup (tied)
        tDuration1 = 2*60/timeScaling;
        footSpeed1_phase1 = vNormal;
        footSpeed2_phase1 = vNormal;

        %% phase 2: baseline (tied)
        tDuration2 = 2*60/timeScaling;
        footSpeed1_phase2 = vNormal;
        footSpeed2_phase2 = vNormal;

        %% phase 3: split adaptation
        tDuration3 = 10*60/timeScaling; % default is 20
        footSpeed1_phase3 = vFast;
        footSpeed2_phase3 = vSlow;

        %% phase 4: second adaptation (back to tied)
        tDuration4 = 10*60/timeScaling; % default is 20
        footSpeed1_phase4 = vSlow;
        footSpeed2_phase4 = vSlow;

        %% initialization
        tStore = [0; tDuration1; tDuration2; tDuration3; tDuration4];
        tStore = cumsum(tStore);

        footSpeed1Store = [footSpeed1_phase1; footSpeed1_phase1; ...
            footSpeed1_phase2; footSpeed1_phase3; footSpeed1_phase4];
        footSpeed2Store = [footSpeed2_phase1; footSpeed2_phase1; ...
            footSpeed2_phase2; footSpeed2_phase3; footSpeed2_phase4];


        %% adding transition phases
        tStore_new = 0;
        footSpeed1Store_new = footSpeed1Store(1);
        footSpeed2Store_new = footSpeed2Store(1);

        for iTran = 2:length(tStore)
            if iTran<length(tStore)
                tStore_new = [tStore_new; tStore(iTran); ...
                    tStore(iTran)+tDurationTransition];
                footSpeed1Store_new = [footSpeed1Store_new; footSpeed1Store(iTran); footSpeed1Store(iTran+1)];
                footSpeed2Store_new = [footSpeed2Store_new; footSpeed2Store(iTran); footSpeed2Store(iTran+1)];
            else
                tStore_new = [tStore_new; tStore(iTran)];
                footSpeed1Store_new = [footSpeed1Store_new; footSpeed1Store(iTran)];
                footSpeed2Store_new = [footSpeed2Store_new; footSpeed2Store(iTran)];
            end
        end

        %% add the random speed fluctuations
        tDelta = paramFixed.beltNoise_tDelta/timeScaling;
        tStore_replace = (tStore_new(5):tDelta:tStore_new(6))';
        if tStore_replace(end)~=tStore_new(6)
            tStore_replace(end) = tStore_new(6);
        end
        tStore_newer = [tStore_new(1:4); tStore_replace; tStore_new(7:end)];
        footSpeed1Store_newer = interp1(tStore_new,footSpeed1Store_new,tStore_newer);
        footSpeed2Store_newer = interp1(tStore_new,footSpeed2Store_new,tStore_newer);
        std_beltnoise = paramFixed.beltNoise/sqrt(g*L);

        randSpeedFluctuations1 = std_beltnoise*randn(size(tStore_replace));
        randSpeedFluctuations1(end-1:end) = 0; randSpeedFluctuations1(1:2) = 0;
        NrandSpeedFluctuations = length(randSpeedFluctuations1);
        randSpeedFluctuations2 = 0*randn(size(tStore_replace));
        randSpeedFluctuations2(end) = 0; randSpeedFluctuations2(1) = 0;

        aMax = paramFixed.beltNoise_aMax*timeScaling^2; % 0.1 m/s roughly
        figure; plot(randSpeedFluctuations1); 
        randSpeedFluctuations1 = clipRandSpeedFluctuations(randSpeedFluctuations1,tDelta,aMax);
        hold on; plot(randSpeedFluctuations1); 
        randSpeedFluctuations2 = clipRandSpeedFluctuations(randSpeedFluctuations2,tDelta,aMax);

        footSpeed1Store_newer(5:5+NrandSpeedFluctuations-1) = ...
            footSpeed1Store_newer(5:5+NrandSpeedFluctuations-1) + ...
            randSpeedFluctuations1;

        footSpeed2Store_newer(5:5+NrandSpeedFluctuations-1) = ...
            footSpeed2Store_newer(5:5+NrandSpeedFluctuations-1) + ...
            randSpeedFluctuations2;

        tStore_new = tStore_newer;
        footSpeed1Store_new = footSpeed1Store_newer;
        footSpeed2Store_new = footSpeed2Store_newer;

        footSpeed1Store_new(footSpeed1Store_new<-1.5/speedScaling) = -1.5/speedScaling; % was implemented in experiment

        %% plot the things
        figure(2555);
        plot(tStore_new,abs(footSpeed1Store_new),'linewidth',2); hold on;
        plot(tStore_new,abs(footSpeed2Store_new),'linewidth',2);
        xlabel('t'); ylabel('treadmill speeds (non-dimensional)');
        legend('(abs) fast belt','(abs) slow belt');
        ylim([0 abs(vFast)*1.25]);
        title('Split belt speed change protocol');

        %         footSpeed1Store = footSpeed1Store_new;
        %         footSpeed2Store = footSpeed2Store_new;

    case 'split savings generalizes to small'

        %% transitioning from one speed to next takes 10 seconds, say
        tDurationTransition = paramFixed.transitionTime/timeScaling;

        %% phase 1: warmup
        tDuration1 = 5*60/timeScaling;
        footSpeed1_phase1 = vNormal;
        footSpeed2_phase1 = vNormal;

        %% phase 2: baseline
        tDuration2 = 1*60/timeScaling;
        footSpeed1_phase2 = vNormal;
        footSpeed2_phase2 = vNormal;

        %% phase 3: adaptation
        tDuration3 = 10*60/timeScaling; % default is 20
        footSpeed1_phase3 = vFast;
        footSpeed2_phase3 = vSlow;

        %% phase 4: second adaptation
        tDuration4 = 25*60/timeScaling; % default is 20
        footSpeed1_phase4 = vNormal;
        footSpeed2_phase4 = vNormal;

        %% phase 5: third adaptation
        tDuration5 = 10*60/timeScaling; % default is 20

        footSpeed1_phase5 = vHalfFast;
        footSpeed2_phase5 = vHalfSlow;

        %         %% phase 5: fourth adaptation
        %         tDuration6 = 20*60/timeScaling; % default is 20
        %         footSpeed1_phase6 = -0.45;
        %         footSpeed2_phase6 = -0.35;

        %% initialization
        tStore = [0; tDuration1; tDuration2; tDuration3; tDuration4; tDuration5];
        tStore = cumsum(tStore);

        footSpeed1Store = [footSpeed1_phase1; footSpeed1_phase1; ...
            footSpeed1_phase2; footSpeed1_phase3; footSpeed1_phase4; footSpeed1_phase5];
        footSpeed2Store = [footSpeed2_phase1; footSpeed2_phase1; ...
            footSpeed2_phase2; footSpeed2_phase3; footSpeed2_phase4; footSpeed2_phase5];

    case 'split savings small to small baseline'

        %% transitioning from one speed to next takes 10 seconds, say
        tDurationTransition = paramFixed.transitionTime/timeScaling;

        %% phase 1: warmup
        tDuration1 = 5*60/timeScaling;
        footSpeed1_phase1 = vNormal;
        footSpeed2_phase1 = vNormal;

        %% phase 2: baseline
        tDuration2 = 1*60/timeScaling;
        footSpeed1_phase2 = vNormal;
        footSpeed2_phase2 = vNormal;

        %% phase 3: adaptation
        tDuration3 = 10*60/timeScaling; % default is 20
        footSpeed1_phase3 = vHalfFast;
        footSpeed2_phase3 = vHalfSlow;

        %% phase 4: second adaptation
        tDuration4 = 25*60/timeScaling; % default is 20
        footSpeed1_phase4 = vNormal;
        footSpeed2_phase4 = vNormal;

        %% phase 5: third adaptation
        tDuration5 = 10*60/timeScaling; % default is 20
        footSpeed1_phase5 = vHalfFast;
        footSpeed2_phase5 = vHalfSlow;

        %         %% phase 5: fourth adaptation
        %         tDuration6 = 20*60/timeScaling; % default is 20
        %         footSpeed1_phase6 = -0.45;
        %         footSpeed2_phase6 = -0.35;

        %% initialization
        tStore = [0; tDuration1; tDuration2; tDuration3; tDuration4; tDuration5];
        tStore = cumsum(tStore);

        footSpeed1Store = [footSpeed1_phase1; footSpeed1_phase1; ...
            footSpeed1_phase2; footSpeed1_phase3; footSpeed1_phase4; footSpeed1_phase5];
        footSpeed2Store = [footSpeed2_phase1; footSpeed2_phase1; ...
            footSpeed2_phase2; footSpeed2_phase3; footSpeed2_phase4; footSpeed2_phase5];

    case 'split savings small baseline'

        %% transitioning from one speed to next takes 10 seconds, say
        tDurationTransition = paramFixed.transitionTime/timeScaling;

        %% phase 1: warmup
        tDuration1 = 9*60/timeScaling;
        footSpeed1_phase1 = vNormal;
        footSpeed2_phase1 = vNormal;

        %% phase 2: baseline
        tDuration2 = 1*60/timeScaling;
        footSpeed1_phase2 = vNormal;
        footSpeed2_phase2 = vNormal;

        %% phase 3: adaptation
        tDuration3 = 20*60/timeScaling; % default is 20
        footSpeed1_phase3 = vHalfFast;
        footSpeed2_phase3 = vHalfSlow;

        %% initialization
        tStore = [0; tDuration1; tDuration2; tDuration3];
        tStore = cumsum(tStore);

        footSpeed1Store = [footSpeed1_phase1; footSpeed1_phase1; ...
            footSpeed1_phase2; footSpeed1_phase3];
        footSpeed2Store = [footSpeed2_phase1; footSpeed2_phase1; ...
            footSpeed2_phase2; footSpeed2_phase3];


end

if isempty(strfind(paramFixed.speedProtocol,'Noisy')) % ie not noisy
    %% adding transition phases
    tStore_new = 0;
    footSpeed1Store_new = footSpeed1Store(1);
    footSpeed2Store_new = footSpeed2Store(1);

    for iTran = 2:length(tStore)
        if iTran<length(tStore)
            tStore_new = [tStore_new; tStore(iTran); ...
                tStore(iTran)+tDurationTransition];
            footSpeed1Store_new = [footSpeed1Store_new; footSpeed1Store(iTran); footSpeed1Store(iTran+1)];
            footSpeed2Store_new = [footSpeed2Store_new; footSpeed2Store(iTran); footSpeed2Store(iTran+1)];
        else
            tStore_new = [tStore_new; tStore(iTran)];
            footSpeed1Store_new = [footSpeed1Store_new; footSpeed1Store(iTran)];
            footSpeed2Store_new = [footSpeed2Store_new; footSpeed2Store(iTran)];
        end
    end
end


%% plot the things
figure(2555);
plot(tStore_new,abs(footSpeed1Store_new),'linewidth',2); hold on;
plot(tStore_new,abs(footSpeed2Store_new),'linewidth',2);
xlabel('t'); ylabel('treadmill speeds (non-dimensional)');
legend('(abs) fast belt','(abs) slow belt');
ylim([0 abs(vFast)*1.25]);
title('Split belt speed change protocol');

%% store in a structure
beltSpeedsImposed.tList = tStore_new;
beltSpeedsImposed.footSpeed1List = footSpeed1Store_new;
beltSpeedsImposed.footSpeed2List = footSpeed2Store_new;

%%
a1List = ...
    diff(beltSpeedsImposed.footSpeed1List)./diff(beltSpeedsImposed.tList);
a2List = ...
    diff(beltSpeedsImposed.footSpeed2List)./diff(beltSpeedsImposed.tList);
a1List = [a1List; 0]; a2List = [a2List; 0];

%%
beltSpeedsImposed.footAcc1List = a1List;
beltSpeedsImposed.footAcc2List = a2List;

end